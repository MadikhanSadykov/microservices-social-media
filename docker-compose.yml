version: '3.8'
services:

  # ZOOKEPER is used to Orchestrate the Apache Kafka Clusters
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000


  # KAFKA Message queue broker
  broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  # Mysql
  mysql_db:
    image: "mysql:8.0"
    restart: always
    container_name: mysql_db
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: db
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_ROOT_PASSWORD: root

  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    depends_on:


  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password


  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  ## Eureka Server
  discovery-server:
    image: madikhansadykov/eureka-server:latest
    container_name: discovery-server
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin


  # Api gateway
  api-gateway:
    image: madikhansadykov/ms-api-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    expose:
      - "8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - zipkin
      - discovery-server


  ## Profile-Microservice Docker Compose Config
  profile-ms:
    container_name: profile-ms
    image: madikhansadykov/profile-microservice:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql_db:3306/prof?createDatabaseIfNotExist=true
    depends_on:
      - zipkin
      - broker
      - mysql_db
      - discovery-server
      - api-gateway


  ## Chat-Microservice Docker Compose Config
  chat-ms:
    container_name: chat-ms
    image: madikhansadykov/chat-microservice:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql_db:3306/chat?createDatabaseIfNotExist=true
    depends_on:
      - zipkin
      - broker
      - mysql_db
      - discovery-server
      - api-gateway


  ## Image-Microservice Docker Compose Config
  image-ms:
    container_name: image-ms
    image: madikhansadykov/image-microservice:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql_db:3306/image?createDatabaseIfNotExist=true
    depends_on:
      - mysql_db
      - discovery-server
      - api-gateway


  ## Notification-Microservice Docker Compose Config
  notification-ms:
    container_name: notification
    image: madikhansadykov/notification:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mysql_db
      - zipkin
      - discovery-server
      - api-gateway


